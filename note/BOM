window对象
    BOM 的核心对象是 window ，它表示浏览器的一个实例。
    在网页中定义的任何一个对象、变量和函数，都以 window 作为其 Global 对象，因此有权访问parseInt() 等方法。
    抛开全局变量会成为 window 对象的属性不谈，定义全局变量与在 window 对象上直接定义属性还
    是有一点差别：全局变量不能通过 delete 操作符删除，而直接在 window 对象上的定义的属性可以。
    例如：
    var age = 29;
    window.color = "red";
    //在 IE < 9 时抛出错误，在其他所有浏览器中都返回 false
    delete window.age;
    //在 IE < 9 时抛出错误，在其他所有浏览器中都返回 true
    delete window.color; //returns true
    alert(window.age); //29
    alert(window.color); //undefined

    top 对象始终指向最高（最外）层的框架，也就是浏览器窗口。
    与 top 相对的另一个 window 对象是 parent 。顾名思义， parent （父）对象始终指向当前框架的
    直接上层框架。在某些情况下， parent 有可能等于 top ；但在没有框架的情况下， parent 一定等于
    top （此时它们都等于 window ）


    使用下列代码可以跨浏览器取得窗口左边和上边的位置。
    var leftPos = (typeof window.screenLeft == "number") ?
    window.screenLeft : window.screenX;
    var topPos = (typeof window.screenTop == "number") ?
    window.screenTop : window.screenY;
    WindowPositionExample01.htm
    这个例子运用二元操作符首先确定 screenLeft 和 screenTop 属性是否存在，如果是（在 IE、
    Safari、Opera 和 Chrome 中），则取得这两个属性的值。如果不存在（在 Firefox 中），则取得 screenX
    和 screenY 的值。



    如果为 window.open() 传递了第二个参数，而且该参数是已有窗口或框架的名称，那么就会在具
    有该名称的窗口或框架中加载第一个参数指定的 URL。看下面的例子。
    //等同于< a href="http://www.wrox.com" target="topFrame"></a>
    window.open("http://www.wrox.com/", "topFrame");


    /************间歇调用和超时调用************/


    超时调用需要使用 window 对象的 setTimeout() 方法，它接受两个参数：要执行的代码和以毫秒
    表示的时间（即在执行代码前需要等待多少毫秒）。其中，第一个参数可以是一个包含 JavaScript 代码的
    字符串（就和在 eval() 函数中使用的字符串一样），也可以是一个函数。例如，下面对 setTimeout()
    的两次调用都会在一秒钟后显示一个警告框。
    //不建议传递字符串！
    setTimeout("alert('Hello world!') ", 1000);
    //推荐的调用方式
    setTimeout(function() {
    alert("Hello world!");
    }, 1000);


    调用 setTimeout() 之后，该方法会返回一个数值 ID，表示超时调用。这个超时调用 ID 是计划执
    行代码的唯一标识符，可以通过它来取消超时调用。要取消尚未执行的超时调用计划，可以调用
    clearTimeout() 方法并将相应的超时调用 ID 作为参数传递给它，如下所示。
    //设置超时调用
    var timeoutId = setTimeout(function() {
    alert("Hello world!");
    }, 1000);
    //注意：把它取消
    clearTimeout(timeoutId);
    TimeoutExample02.htm
    只要是在指定的时间尚未过去之前调用 clearTimeout() ，就可以完全取消超时调用。前面的代码
    在设置超时调用之后马上又调用了 clearTimeout() ，结果就跟什么也没有发生一样。




间歇调用与超时调用类似，只不过它会按照指定的时间间隔重复执行代码，直至间歇调用被取消或
者页面被卸载。设置间歇调用的方法是 setInterval() ，它接受的参数与 setTimeout() 相同：要执
行的代码（字符串或函数）和每次执行之前需要等待的毫秒数。下面来看一个例子。
//不建议传递字符串！
setInterval ("alert('Hello world!') ", 10000);
//推荐的调用方式
setInterval (function() {
alert("Hello world!");
}, 10000);
IntervalExample01.htm
调用 setInterval() 方法同样也会返回一个间歇调用 ID，该 ID 可用于在将来某个时刻取消间歇
调用。要取消尚未执行的间歇调用，可以使用 clearInterval() 方法并传入相应的间歇调用 ID。取消
间歇调用的重要性要远远高于取消超时调用，因为在不加干涉的情况下，间歇调用将会一直执行到页面
卸载。以下是一个常见的使用间歇调用的例子。
var num = 0;
var max = 10;
var intervalId = null;
function incrementNumber() {
num++;
//如果执行次数达到了 max 设定的值，则取消后续尚未执行的调用
if (num == max) {
clearInterval(intervalId);
alert("Done");
}
}
intervalId = setInterval(incrementNumber, 500);



    /************间歇调用和超时调用************/