<script>元素属性：
async：立即下载脚本，只对外部脚本文件有效，不妨碍其他操作，标记async的脚本不保证按照制定的先后顺序执行
charset： src属性指定的代码的字符集
defer： 表示脚本延迟到文档解析和显示后执行，即html和css加载后执行，只对外部脚本有效，此属性相当于告诉浏览器立即下载但是延迟执行（最好只有一个延迟脚本）
src： 引入外部文件，参数为文件路径
type：脚本的内容类型

现在web通常把js引用放在<body>中页面内容之后，减少延迟
引入js文件如下：
<script type="application/javascript" src="js/jquery-2.1.4.js"></script>

使用外部文件调用js代码的好处：
            1、可维护性，统一管理js代码
            2、可缓存，不同页面使用同一套js，可以只下载一次js文件，加快页面加载速度
            3、适应未来


变量：var定义变量，未初始化变量保存特殊值undefined。

/*********************************数据类型****************************************************************************************************/

数据类型：
typeof 返回字符串对应类型
    undefined ————》Undefined
    boolean ————》Boolean
    number ————》Number
    string ————》String
    object ————》Object或者Null
    function————》函数

    1、Undefined
    2、Null
    3、Boolean
    4、Number  8进制0开头，16进制0x开头，不要对浮点数值进行相加比较，如0.1+0.2==0.3(计算机计算浮点数值会产生舍入误差)，js中除以0会返回NaN，NaN和任何值都不相等，包括NaN
    Number()函数转换规则：
    Boolean值 true 1 false 0
    null 返回0
    undefined 返回NaN
    十六进制样式字符串 如0xf 返回相同大小的十进制数字
    空字符串返回0
    带字母等返回NaN
    如果是对象，调用对象的valueOf方法，然后返回，如果返回NaN调用toString()方法
    5、String
        字符方法：
        charAt() 以单字符字符串的形式返回给定位置的字符
        charCodeAt() 返回字符编码
        字符串操作方法
        concat() 将多个字符串拼接返回
        slice() 前包后不包
        substr()前包后不包
        substring()第一个参数是起始，第二个是长度

         String s = "hello world";
         slice(-3)      rld
         substr(-3)     rld
         substring(-3)  hello world
         slice(3,-4)      lo w
         substr(3,-4)     rld
         substring(3,-4)  hel


         字符串位置方法：
         搜索给定字符串，没有返回-1
         indexOf()
      lastIndexOf


        trim()方法
        清除前置以及后缀的空格

        大小写
        toLowerCase()
        toUpperCase()
        toLocaleUpperCase()
        toLocaleLowerCase()

        匹配
        match() 接收一个参数 正则表达式 或者RegExp对象
         search() 接收一个参数 正则表达式 或者RegExp对象,没查到返回-1，从字符串开头向后查找


        基本类型变量值的复制前后相互独立，
        引用类型复制后是同一个指针，会相互影响
        通过instanceof判断一个值属于哪种引用类型
        js中判断数据类型的四种方法
        https://blog.csdn.net/liwenfei123/article/details/77978027


        ------------------------------引用类型-------------------------------
        引用类型：
        1、Object
            创建方式
             1、new操作符创建：var obj = new Object();
             2、对象字面量，var person = {
                name:"Nicholas",
                age:29,
                sayName:function(){
                alert(this.name);
                }
             };
             如果对象字面量后留空花括号，只包含默认属性和方法
            Object可以动态的创建属性，如obj.name = "wodemingzi";此时就是为了obj这个对象动态创建一个name属性
            每个Object自带方法:
            constructor ：构造函数，保存着用于创建当前对象的函数。对于前面的例子而言，构造函数就是Object();
            hasOwnProperty(propertyName):检查对象中是否存在该属性，属性名必须是字符串形式传入，如obj.hasOwnProperty("name")）。
            isPrototypeOf(object):检查传入对象是否是传入对象的原型
            propertyIsEnumerable（propertyName）：检查能否使用for-in来枚举
            toLocaleString():返回对象的字符串表示
            toString() 返回对象的字符串表示
            valueOf（）返回对象的字符串表示，数值或布尔值表示，通常与toString()方法的返回值相同

        2、Array类型
        创建方式：
        var colors = new Array(20);
        var colors = new Array("red","blue","green")
        new 操作符可以省略
        /***错误示例******/
        var name = [1,2,3]
        IE中values会成为一个包含1，2，undefined，而其他浏览器则是1，2
        /***错误示例******/

        数组的length属性不是只读，可以根据设置length属性来移除末尾项或向数组添加新项

        数组最多可以包含4294967295个项，超出会发生异常

        检测数组
        value instanceof Array
        Array.isArray(value) //支持的浏览器:IE9+、Firefox4+、Safari 5+、Oprea10.5+ 和Chrome

        join()方法，该方法只接受一个参数，即用作分隔符的字符串，然后返回包含所有数组项的字符串
        var  colros= ["a","b","c"];
        colors.join("|"); //  a|b|c

        栈方法 arr.push();推入数据
                arr.pop()；获取并移除数据，返回被移除的项

         队列方法
            arr.shift();移除并取得数组的第一项
            arr.unshift();数组前端添加任意项，并返回新的length
            unshift（"red","green"）时，先放green，后放red，red为数组首项

          数组重排序方法：
          1、reverse（）
          降序反转排序，如1，2，3，4，5 返回5，4，3，2，1
          2、sort（）
          升序排序，实现方法为数组中每项都toString（）然后比较字符串确定排序方法
          sort（）方法可以接收一个比较函数作为参数，以便我们指定哪个值位于哪个值前面
          比较函数接收两个参数，如果第一个参数位于第二个参数前返回负数，相等返回0，否则返回证书
          function compare（v1,v2）{
          if(v1<v2){
          return -1;
          }else if(v1>v2){
          return 1
          }
          else{
          return 0;
          }
          }
          values.sort(compare);

          数组操作方法：
          concat（）基于当前数组中所有项创建一个新数组，相当于创建一个副本然后将参数添加到副本后面返回，不影响原数组
          sclice（）基于当前数组船舰一个或者多个数组，返回从当前位置起始到结束位置单不包括结束位置的所有项，无结束参数则直接到最后，不影响原数组
          splice（）可用于删除，插入，替换
          删除：splice（0，2）删除前两项
          插入：splice（2，0，"a","b"）,从数组2的位置插入a,b
          替换：splice（2，1，"a","b"）,删除位置2的项，然后从数组位置2的位置插入a,b


          位置方法
          indexOf()
          lastIndexOf()
          查找索引，未找到时返回-1，


          迭代方法
          5个迭代方法，每个方法都是两个参数
          every()，数组中每一项都运行给定函数，全为true返回true
          filter(),运行每一项返回true的项组成新的数组
          forEach（），运行每一项，没返回值
          map（），运行每一项，返回每次调用结果组成的数组
          some（），运行每一项，任意一项目为ture返回ture
          以上方法都不会修改数组的值


          归并方法
          reduce() 从数组第一项开始，逐个遍历到最后哦
          reduceRight() 从数组最后开始，遍历到第一项
          两个方法都接收两个参数，一个在每一项调用的函数和作为归并基础的初始值，传给俩者的函数接收4个参数：前一个值，当前值，项目的索引和数组对象，这个函数返回的任何值都会作为第一个参数传给下一项


        Date类型
        Date.parse()，根据日期字符串返回毫秒数，如果格式错误返回NaN
        Date.UTC 月份基于0，一月是0
        ------------------------------引用类型-------------------------------
/*********************************数据类型****************************************************************************************************/





/**************************************语句****************************************************************************************************************/

       语句：for-in，是一种迭代语句，可以用来枚举对象的属性
       如 for(property in window){
       document.write(property);
       }
       如上是用for-in循环赋值window对象中的属性名给property，然后输出

       switch（expression）{
       case value : statement
       break;
       default :statement
       }
       如果表达式等于value，执行statement，break会跳出switch

        with语句的作用是将代码的作用域设置到一个特定的对象中
        语法：with(expression) statement;
        with语句的目的主要是为了简化多次编写同一个对象的工作：如下
        var qs = location.search.substring(1);
        var hostname = location.hostname;
        var url = location.href;
        上面代码都包含了location对象，如果使用with语句，可以把代码改为
        with(location){
            var qs = search.substring(1);
            var hostname = hostname;
            var url = href;
        }
        在重写后的例子中，使用with语句关联了location对象。意味着在with语句的代码块内部，每个变量首先被认为是一个局部变量，而如果在局部环境中找不到该变量的定义，就会查询location对象中是否有同名的属性。如果发现，以location对象属性的值作为变量的值。（大量使用with会导致性能下降）

/**************************************语句****************************************************************************************************************/


/**************************************垃圾回收****************************************************************************************************************/
管理内存，一旦数据不再有用，将其设置为null，此方法为解除引用


/**************************************垃圾回收****************************************************************************************************************/